<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>General modeling on cobrapy - constraint-based metabolic modeling in Python</title>
    <link>https://opencobra.github.io/cobrapy/tags/general-modeling/</link>
    <description>Recent content in General modeling on cobrapy - constraint-based metabolic modeling in Python</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Jan 2017 11:00:01 -0600</lastBuildDate>
    
	<atom:link href="https://opencobra.github.io/cobrapy/tags/general-modeling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>cameo</title>
      <link>https://opencobra.github.io/cobrapy/packages/cameo/</link>
      <pubDate>Fri, 13 Jan 2017 11:00:01 -0600</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/packages/cameo/</guid>
      <description>Cameo is a high-level python library developed to aid the strain design process in metabolic engineering projects. The library provides a modular framework of simulation methods, strain design methods, access to models, that targets developers that want custom analysis workflows.
Computationally heavy methods have been parallelized and can be run on a clusters using the IPython parallelization framework (see example and documentation for more details). The default fallback is python&amp;rsquo;s multiprocessing library.</description>
    </item>
    
    <item>
      <title>optlang</title>
      <link>https://opencobra.github.io/cobrapy/packages/optlang/</link>
      <pubDate>Fri, 13 Jan 2017 11:00:01 -0600</pubDate>
      
      <guid>https://opencobra.github.io/cobrapy/packages/optlang/</guid>
      <description>Optlang is a Python package for solving mathematical optimization problems, i.e. maximizing or minimizing an objective function over a set of variables subject to a number of constraints. Optlang provides a common interface to a series of optimization tools, so different solver backends can be changed in a transparent way. Optlang&amp;rsquo;s object-oriented API takes advantage of the symbolic math library sympy to allow objective functions and constraints to be easily formulated from symbolic expressions of variables</description>
    </item>
    
  </channel>
</rss>